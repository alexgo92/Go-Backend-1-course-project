# Для запуска линтера запускаем
# $ golangci-lint run
# настройки запуска
run:
  # значение конкурентности устанавливаем по количеству CPU
  concurrency: 4
  # анализ не должен превышать
  timeout: 1m
  # выводить "exit-code" при наличии хотя бы одного сообщения
  issues-exit-code: 1
  # не включать анализ тестов
  tests: false
  # Пропускать папки вендора, сторонних зависимостей и т.д.
  # vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true
  # Пропускать файлы, заканчивающиеся на .bad.go
  skip-files:
    - ".*\\.bad\\.go$"

# список линтеров
linters:
  disable-all: true
  enable:
    - gofmt # форматирование кода (пробелы, отступы, скобки)
    - goimports # обновление списка imports
    - govet # общий анализ возможных багов
    - goconst # нахождение строк, которые следует вынести в константы
    - funlen # детектирование слишком крупных функций
    - bodyclose # проверка на незакрытые body после чтения тела ответа
    - errcheck # проверка на обработку всех ошибок
    - deadcode # детектирование не использованного кода
    - exportloopref # детектирование экспорта указателя на переменную внутри цикла
    - mulint # проверка мьютексов (только которые находятся в структуре)
    - gochecknoglobals # проверка на использование глобальных переменных
    - prealloc
    - fieldalignment
    - copyfighter

# настройки отдельных линтеров
linters-settings:
  govet:
    # проверка на использование переменных «в тени»
    check-shadowing: true
  funlen:
    # функция помечается длинной если она больше 100 строк кода либо больше 50 операций
    lines: 100
    statements: 50
